#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Header(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'version', None, None, ), # 1
    (2, TType.STRING, 'patient_id', None, None, ), # 2
    (3, TType.STRING, 'record_id', None, None, ), # 3
    (4, TType.STRING, 'startdate', None, None, ), # 4
    (5, TType.STRING, 'starttime', None, None, ), # 5
    (6, TType.I32, 'header_length', None, None, ), # 6
    (7, TType.I32, 'num_of_records', None, None, ), # 7
    (8, TType.I32, 'record_duration', None, None, ), # 8
    (9, TType.I32, 'num_of_signals', None, None, ), # 9
    (10, TType.LIST, 'labels', (TType.STRING,None), None, ), # 10
    (11, TType.LIST, 'transducer_types', (TType.STRING,None), None, ), # 11
    (12, TType.LIST, 'physical_dims', (TType.STRING,None), None, ), # 12
    (13, TType.LIST, 'physical_mins', (TType.I32,None), None, ), # 13
    (14, TType.LIST, 'physical_maxs', (TType.I32,None), None, ), # 14
    (15, TType.LIST, 'dig_mins', (TType.I32,None), None, ), # 15
    (16, TType.LIST, 'dig_maxs', (TType.I32,None), None, ), # 16
    (17, TType.LIST, 'prefilterings', (TType.STRING,None), None, ), # 17
    (18, TType.LIST, 'nrs', (TType.I32,None), None, ), # 18
  )

  def __init__(self, d=None):
    self.version = None
    self.patient_id = None
    self.record_id = None
    self.startdate = None
    self.starttime = None
    self.header_length = None
    self.num_of_records = None
    self.record_duration = None
    self.num_of_signals = None
    self.labels = None
    self.transducer_types = None
    self.physical_dims = None
    self.physical_mins = None
    self.physical_maxs = None
    self.dig_mins = None
    self.dig_maxs = None
    self.prefilterings = None
    self.nrs = None
    if isinstance(d, dict):
      if 'version' in d:
        self.version = d['version']
      if 'patient_id' in d:
        self.patient_id = d['patient_id']
      if 'record_id' in d:
        self.record_id = d['record_id']
      if 'startdate' in d:
        self.startdate = d['startdate']
      if 'starttime' in d:
        self.starttime = d['starttime']
      if 'header_length' in d:
        self.header_length = d['header_length']
      if 'num_of_records' in d:
        self.num_of_records = d['num_of_records']
      if 'record_duration' in d:
        self.record_duration = d['record_duration']
      if 'num_of_signals' in d:
        self.num_of_signals = d['num_of_signals']
      if 'labels' in d:
        self.labels = d['labels']
      if 'transducer_types' in d:
        self.transducer_types = d['transducer_types']
      if 'physical_dims' in d:
        self.physical_dims = d['physical_dims']
      if 'physical_mins' in d:
        self.physical_mins = d['physical_mins']
      if 'physical_maxs' in d:
        self.physical_maxs = d['physical_maxs']
      if 'dig_mins' in d:
        self.dig_mins = d['dig_mins']
      if 'dig_maxs' in d:
        self.dig_maxs = d['dig_maxs']
      if 'prefilterings' in d:
        self.prefilterings = d['prefilterings']
      if 'nrs' in d:
        self.nrs = d['nrs']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.patient_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.record_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.startdate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.starttime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.header_length = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.num_of_records = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.record_duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.num_of_signals = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.labels = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.labels.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.transducer_types = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.transducer_types.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.physical_dims = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.physical_dims.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.physical_mins = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readI32();
            self.physical_mins.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.physical_maxs = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = iprot.readI32();
            self.physical_maxs.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.dig_mins = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = iprot.readI32();
            self.dig_mins.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.dig_maxs = []
          (_etype39, _size36) = iprot.readListBegin()
          for _i40 in xrange(_size36):
            _elem41 = iprot.readI32();
            self.dig_maxs.append(_elem41)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.LIST:
          self.prefilterings = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readString();
            self.prefilterings.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.nrs = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = iprot.readI32();
            self.nrs.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Header')
    if self.version != None:
      oprot.writeFieldBegin('version', TType.STRING, 1)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.patient_id != None:
      oprot.writeFieldBegin('patient_id', TType.STRING, 2)
      oprot.writeString(self.patient_id)
      oprot.writeFieldEnd()
    if self.record_id != None:
      oprot.writeFieldBegin('record_id', TType.STRING, 3)
      oprot.writeString(self.record_id)
      oprot.writeFieldEnd()
    if self.startdate != None:
      oprot.writeFieldBegin('startdate', TType.STRING, 4)
      oprot.writeString(self.startdate)
      oprot.writeFieldEnd()
    if self.starttime != None:
      oprot.writeFieldBegin('starttime', TType.STRING, 5)
      oprot.writeString(self.starttime)
      oprot.writeFieldEnd()
    if self.header_length != None:
      oprot.writeFieldBegin('header_length', TType.I32, 6)
      oprot.writeI32(self.header_length)
      oprot.writeFieldEnd()
    if self.num_of_records != None:
      oprot.writeFieldBegin('num_of_records', TType.I32, 7)
      oprot.writeI32(self.num_of_records)
      oprot.writeFieldEnd()
    if self.record_duration != None:
      oprot.writeFieldBegin('record_duration', TType.I32, 8)
      oprot.writeI32(self.record_duration)
      oprot.writeFieldEnd()
    if self.num_of_signals != None:
      oprot.writeFieldBegin('num_of_signals', TType.I32, 9)
      oprot.writeI32(self.num_of_signals)
      oprot.writeFieldEnd()
    if self.labels != None:
      oprot.writeFieldBegin('labels', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.labels))
      for iter54 in self.labels:
        oprot.writeString(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.transducer_types != None:
      oprot.writeFieldBegin('transducer_types', TType.LIST, 11)
      oprot.writeListBegin(TType.STRING, len(self.transducer_types))
      for iter55 in self.transducer_types:
        oprot.writeString(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.physical_dims != None:
      oprot.writeFieldBegin('physical_dims', TType.LIST, 12)
      oprot.writeListBegin(TType.STRING, len(self.physical_dims))
      for iter56 in self.physical_dims:
        oprot.writeString(iter56)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.physical_mins != None:
      oprot.writeFieldBegin('physical_mins', TType.LIST, 13)
      oprot.writeListBegin(TType.I32, len(self.physical_mins))
      for iter57 in self.physical_mins:
        oprot.writeI32(iter57)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.physical_maxs != None:
      oprot.writeFieldBegin('physical_maxs', TType.LIST, 14)
      oprot.writeListBegin(TType.I32, len(self.physical_maxs))
      for iter58 in self.physical_maxs:
        oprot.writeI32(iter58)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dig_mins != None:
      oprot.writeFieldBegin('dig_mins', TType.LIST, 15)
      oprot.writeListBegin(TType.I32, len(self.dig_mins))
      for iter59 in self.dig_mins:
        oprot.writeI32(iter59)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dig_maxs != None:
      oprot.writeFieldBegin('dig_maxs', TType.LIST, 16)
      oprot.writeListBegin(TType.I32, len(self.dig_maxs))
      for iter60 in self.dig_maxs:
        oprot.writeI32(iter60)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.prefilterings != None:
      oprot.writeFieldBegin('prefilterings', TType.LIST, 17)
      oprot.writeListBegin(TType.STRING, len(self.prefilterings))
      for iter61 in self.prefilterings:
        oprot.writeString(iter61)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.nrs != None:
      oprot.writeFieldBegin('nrs', TType.LIST, 18)
      oprot.writeListBegin(TType.I32, len(self.nrs))
      for iter62 in self.nrs:
        oprot.writeI32(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self):
    return str(self.__dict__)

  def __repr__(self):
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

